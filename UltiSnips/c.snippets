priority -10

snippet inc "External include directive" bA
#include <${1:stdio}.h>
endsnippet

snippet iinc "Local include directive" bA
#include "${1:`!v expand("%:t:r")`.h}"
endsnippet

snippet guard "Header guard" bA
#ifndef ${1:`!v toupper(expand("%:t:r")) . "_H"`}
#define $1

$0

#endif /* $1 */
endsnippet

snippet main "Main function" b
int main(int argc, char **argv) {
  ${VISUAL}$0
}
endsnippet

snippet fun "function" b
${2:void} ${1:foo}($3) {
  $0
}
endsnippet

snippet dfun "function prototype" b
${2:void} ${1:foo}($3);$0
endsnippet

snippet ddfun "function prototype with doc" b
/*! \brief ${4:$1}
 * 
 *  ${5:(Doxygen tags: \param, \return, \sa ...)}
 *  ${6:\todo}
 */
${2:void} ${1:foo}($3);$0
endsnippet

snippet if "If block"
if (${1}) {
  ${VISUAL}$0
}
endsnippet

snippet ife "If Else"
if (${1}) {
  $2
} else {
  $0
}
endsnippet

snippet elif "Else if"
else if ($1) {
  $0
}
endsnippet

snippet while
while ($1) {
  $0
}
endsnippet

snippet do
do {
  $0
} while ($1);
endsnippet

snippet switch
switch ($1) {
  case $2:
    $0
    break;
  default:
    $3
    break;
}
endsnippet

snippet for
for (${3:int} ${1:i} = ${2:0}; $1 ${4:< size}; ${5:++$1}) {
  $0
}
endsnippet

snippet st
struct $1 {
  $0
}
endsnippet

snippet tst
typedef struct {
  $0
} $1;
endsnippet

snippet malloc
($1*) malloc(sizeof(${1:int})$2);$0
endsnippet

snippet calloc
($1*) calloc(${2:size}, sizeof(${1:int}));$0
endsnippet

snippet typedef "" bA
typedef ${1:type} ${2:alias};$0
endsnippet
